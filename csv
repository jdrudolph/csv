#!/usr/bin/env python
import csv
import sys
import argparse

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='filter one column of a csv file')	
	subparsers = parser.add_subparsers(dest='cmd')

	get = subparsers.add_parser('get')
	group = get.add_mutually_exclusive_group(required=True)
	group.add_argument('-i', '--index', type=int)
	group.add_argument('-n', '--name')
	get.add_argument('-t', '--type',
			help='specify the type format of the output',
			default='string')
	get.add_argument('-s', '--strip',
			help='ignore empty cells',
			action='store_true')
	get.set_defaults(strip=False)
	get.add_argument('inp', metavar='in', nargs='?', type=argparse.FileType('r'),
			default=sys.stdin, help='input file (default: stdin)')
	get.add_argument('out', nargs='?', type=argparse.FileType('w'),
			default=sys.stdout, help='output file (default: stdout)')

	show = subparsers.add_parser('show')
	show.add_argument('inp', metavar='in', nargs='?', type=argparse.FileType('r'),
			default=sys.stdin, help='input file (default: stdin)')
	show.add_argument('out', nargs='?', type=argparse.FileType('w'),
			default=sys.stdout, help='output file (default: stdout)')
	
	args = parser.parse_args()
	reader = csv.reader(args.inp)
	header = reader.next()
	
	if args.cmd == 'get':
		out_type = lambda x : str(x)
		if args.type == 'int':
			out_type = lambda x: str(int(float(x)))
		
		if args.index is not None:
			column = args.index
		elif args.name is not None:
			try:
				column = header.index(args.name)
			except ValueError as e:
				print 'Invalid column', args.name
				sys.exit(1)

		for line in reader:
			x = line[column]
			if args.strip and len(x) < 0:
				continue
			try:
				if len(x) == 0:
					args.out.write('\n')
					continue
				args.out.write(out_type(x) + '\n')
			except Exception as e:
				print 'ERROR:', x, e
				sys.exit(1)
		sys.exit(0)
	
	elif args.cmd == 'show':
		args.out.write(' '.join([str(i) + ':' + c for i,c in enumerate(header)]) + '\n')
			
		sys.exit(0)
