#!/usr/bin/env python
import csv
import sys
import argparse

def _get(args):
    columns = []
    if args.index is not None:
        columns += [x[0] for x in args.index]
    elif args.name is not None:
        for names in args.name:
            name = names[0]
            try:
                columns += [header.index(name)]
            except ValueError as e:
                print 'Invalid column', name
                sys.exit(1)

    if not args.headless:
        args.out.write(','.join([header[c] for c in columns]) + '\n')

    for line in reader:
        x = [line[c] for c in columns]
        if args.strip and len(x) < 0:
            continue
        if len(x) > 0:
            try:
                if len(x) == 0:
                    args.out.write('\n')
                else:
                    args.out.write(','.join(x) + '\n')
            except IOError as e:
                print 'ERROR:', x, e
                sys.exit(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='filter one column of a csv file')	
    subparsers = parser.add_subparsers(dest='cmd')

    get = subparsers.add_parser('get')
    group = get.add_argument_group('column selection')
    group.add_argument('-i', '--index', nargs='*', action='append', type=int)
    group.add_argument('-n', '--name', nargs='*', action='append')
    get.add_argument('-l', '--headless', help='do not print header',
            action='store_true')
    get.add_argument('-s', '--strip',
            help='ignore empty cells',
            action='store_true')
    get.add_argument('inp', metavar='in', nargs='?', type=argparse.FileType('r'),
            default=sys.stdin, help='input file (default: stdin)')
    get.add_argument('out', nargs='?', type=argparse.FileType('w'),
            default=sys.stdout, help='output file (default: stdout)')

    show = subparsers.add_parser('show')
    show.add_argument('-d', '--dense', default=False)
    show.add_argument('inp', metavar='in', nargs='?', type=argparse.FileType('r'),
            default=sys.stdin, help='input file (default: stdin)')
    show.add_argument('out', nargs='?', type=argparse.FileType('w'),
            default=sys.stdout, help='output file (default: stdout)')

    args = parser.parse_args()
    
    reader = csv.reader(args.inp)
    header = reader.next()

    if args.cmd == 'get':
        _get(args)
        sys.exit(0)

    elif args.cmd == 'show':
        if args.dense:
            sep = ' '
        else:
            sep = '\n'
        args.out.write(sep.join([str(i) + ':' + c for i,c in enumerate(header)]) + '\n')
        sys.exit(0)
